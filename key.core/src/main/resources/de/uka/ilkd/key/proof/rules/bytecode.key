\functions {
    // Heap putfieldNative(java.lang.Object,Seq);

}

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \modalOperator {diamond, diamond_transaction} #diamond;
    \modalOperator {box, box_transaction} #box;

    \formula post, inv, post1;
    \program Type #t, #t2;
    \program NonPrimitiveType #npit;
    \program PrimitiveType #pit;

    \term G q;
    \skolemTerm G sk;

    \program ArrayLength #length;

    \program MultipleVariableDeclaration #multvardecl;
    \program ArrayPostDeclaration #arraypost;
    \program SimpleExpression #se, #se0, #se1, #se2;
    \program SimpleExpression #src, #dest, #srcOff, #destOff, #arlength;
    \program SimpleExpressionNonFloatDouble #senf, #senf0, #senf1;

    \program LeftHandSide #lhs, #lhs0, #lhs1, #lhs2;
    \program LeftHandSide #attribute;
    \program Variable #loc;
    \program StaticVariable #sv, #sv0, #sv1;

    \program Variable #v, #v0, #v1, #v2, #boolv, #a, #a0, #a1, #a2, #a3;

    \program ConstantPrimitiveTypeVariable #cv; // variables that are compile-time constants
    \program Variable #b0, #ar1;
    \program VariableInitializer #vi;
    \program SimpleJavaBooleanExpression #seBool, #seBool0, #seBool1, #seBool2;
    \program JavaBooleanExpression #exBool, #exBool0, #exBool1, #exBool2;

    \program NonSimpleExpression #nseBool, #nseBool0, #nseBool1, #nseBool2;
    \program Statement #s, #s0, #s1;
    \program LoopInit #loopInit;
    \program Guard #guard;
    \program ForUpdates #forupdates;
    \program ForLoop #forloop;
    \program Expression #e, #e0, #e1, #e2;
    \program NonSimpleExpression #nse, #nse0, #nse1, #nse2, #nv;
    \program NonSimpleExpressionNoClassReference #nsencr;

    \program ClassReference #cr;

    \program [list] Statement #slist, #slist1, #slist2, #slist3;
    \program [list] Expression #elist;
    \program [list] SimpleExpression #selist;
    \program [list] Catch #cs;

    \program Switch #sw;
    \program Label #lb, #lb0, #lb1, #innerLabel, #outerLabel;
    \program NonSimpleMethodReference #nsmr;
    \program NonModelMethodBody #mb;
    \program MethodName #mn;

    \program NonPrimitiveType [name = javacard.framework.JCSystem] #jcsystemType;
    \program MethodName [name = nativeKeYBeginTransaction] #beginTransaction;
    \program MethodName [name = nativeKeYCommitTransaction] #commitTransaction;
    \program MethodName [name = nativeKeYAbortTransaction] #abortTransaction;

    \program ExecutionContext #ex, #ex1;
    \program ProgramMethod #pm;

    \formula anon1, anon2, anon3;

    \formula for1, for2;

    \program NonStringLiteral #lit;
    \program StringLiteral #slit;

    \variables int iv, iv2, iv3;
    \term int idx;

    // generic sorts
    \term G variant;
    \term GOS array;
    \term H obj;

    \variables G x;
    \term H then, else;

    \term G updatedTerm1, updatedTerm2;
}
\rules {


    putfield {
        \schemaVar \program MethodName [name = putfield] #putfield;
        \schemaVar \program NonPrimitiveType [name = de.aload.JVM] #jvmType;
        \find(\modality{#allmodal}{.. #v.#putfield(#slit); ...}\endmodality (post))
        \varcond(
            \isContent [set_to_parameter, full, de_aload_JVM_opStack](#slit, #a),
            \isContent [full](#slit, #a1)
        )
        \replacewith(
         {heap := store(
            store(
                heap,
               #v,
                #memberPVToField(#a),
                seqSub(
                    Seq::select(
                        heap,
                        #v,
                        #memberPVToField(#a)
                    ),
                    0,
                    seqLen(
                        Seq::select(
                            heap,
                            #v,
                            #memberPVToField(#a)
                        )
                   )-2
            
                )
                
            ),
            Object::seqGet(
                Seq::select(
                    heap,
                    #v,
                    #memberPVToField(#a)
                ),
                seqLen(
                    Seq::select(
                        heap,
                        #v,
                        #memberPVToField(#a)
                    )
                )-2),
            #memberPVToField(#a1),
            any::seqGet(
                Seq::select(
                    heap,
                    #v,
                    #memberPVToField(#a)
                ),
                seqLen(
                    Seq::select(
                        heap,
                        #v,
                        #memberPVToField(#a)
                    )
                )-1)
            )
            }\modality{#allmodal}{..  ...}\endmodality (post))
        \displayname "putfield bytecode"
    };

    getField {
        \schemaVar \program MethodName [name = getfield] #getfield;
        \find(\modality{#allmodal}{.. #v.#getfield(#slit); ...}\endmodality (post))
        \varcond(
            \isContent [set_to_parameter, full, de_aload_JVM_opStack](#slit, #a),
            \isContent [full](#slit, #a1),
            \new(#a2, Seq)
        )
        \replacewith(
         {heap := store(
            heap,   
            #v,
            #memberPVToField(#a),
            seqConcat(
                Seq::select(
                    heap,
                    #v,
                    #memberPVToField(#a)
                ),
                seqSingleton(
                    any::select(
                        heap,
                        Object::seqGet(
                            Seq::select(
                                heap,
                                #v,
                                #memberPVToField(#a)
                            ),
                            seqLen(
                                Seq::select(
                                    heap,
                                    #v,
                                    #memberPVToField(#a)
                                )
                            )-1
                        ),
                        #memberPVToField(#a1)
                    )
                )
            )
         )
            }\modality{#allmodal}{..  ...}\endmodality (post))
        \displayname "getfield bytecode"
    };
}



